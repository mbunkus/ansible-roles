---
# tasks file for install_packages

- name: "install_packages | Update package list"
  ansible.builtin.include_role:
    name: "force_package_list_update"
  tags:
    - install_packages
    - install_packages_update_packages

- name: "install_packages | Update installed applications list"
  ansible.builtin.include_role:
    name: "get_installed_apps"
  tags:
    - install_packages_get_installed_apps
    - install_packages

- name: "install_packages | Set installed apps"
  ansible.builtin.set_fact:
    install_packages_currently_installed_apps: "{{ get_installed_apps_installed_apps }}"
  tags:
    - install_packages
    - install_packages_set_installed_apps

- name: "install_packages | Install Univention app packages"
  vars:
    install_packages_package_version: "{{ '=' + install_packages_app_version_map[item]
      if item in install_packages_app_version_map
      else '' }}"
    install_packages_package_name: "{{ install_packages_service_name_list[item]|default(item) }}"
  ansible.builtin.command: >
    univention-app
    install
    {{ install_packages_package_name }}{{ install_packages_package_version }}
    --noninteractive
    --pwdfile
    {{ install_packages_temp_pw_file.path }}
    {% if install_packages_additional_options is defined and install_packages_additional_options|length > 0 %}
    --set {{ install_packages_additional_options }}
    {% endif %}
  loop: "{{ install_packages_install_apps }}"
  when: install_packages_package_name not in install_packages_currently_installed_apps or
        (install_packages_force_package_upgrade|bool and
          (install_packages_package_version != '') and
          (install_packages_currently_installed_apps[package_name] != install_packages_package_version[1:]))
  register: install_packages_package_install
  retries: 10
  delay: 10
  until: "install_packages_package_install.rc == 0"
  tags:
    - install_apps
    - install_apps_install_app
