---
# tasks file for ucs_join

- name: "ucs_join | Check if all mandatory common vars are set"
  ansible.builtin.assert:
    that:
      - "ucs_join_server_type|string|length > 0"
      - "ucs_join_server_type == 'master' or ucs_join_server_type == 'backup'"
      - "ucs_join_admin_user_name|string|length > 0"
      - "ucs_join_root_password|string|length > 0"
      - "ucs_join_hostname|string|length > 0"
      - "ucs_join_domain_name|string|length > 0"
      - "ucs_join_basedn|string|length > 0"
      - "ucs_join_network_config_interface|string|length > 0"
      - "ucs_join_network_config_type|string|length > 0"
    fail_msg: "At least one necessary variable is not set. Skip this check with --skip-tags ucs_join_check_common_preconditions"
  tags:
    - ucs_join
    - ucs_join_check_common_preconditions

- name: "ucs_join | Check if all static network setting vars are set"
  ansible.builtin.assert:
    that:
      - "ucs_join_network_config_static_ip_config|string|length > 0"
      - "ucs_join_network_config_static_ip_config|ipaddr('address')|length > 0"
      - "ucs_join_network_config_static_ip_config|ipaddr('netmask')|length > 0"
      - "ucs_join_network_config_static_ip_config|ipaddr('network')|length > 0"
      - "ucs_join_network_config_static_gateway|string|length > 0"
      - "ucs_join_network_config_static_dns_servers|length > 0"
    fail_msg: "At least one necessary variable is not set. Skip this check with --skip-tags ucs_join_check_static_network_preconditions"
  when: "ucs_join_network_config_type == 'static'"
  tags:
    - ucs_join
    - ucs_join_check_static_network_preconditions

- name: "ucs_join | Check if backup vars are set"
  ansible.builtin.assert:
    that:
      - "ucs_join_master_server|string|length > 0"
    fail_msg: "At least one necessary variable is not set. Skip this check with --skip-tags ucs_join_check_backup_preconditions"
  when: "ucs_join_server_type == 'backup'"
  tags:
    - ucs_join
    - ucs_join_check_backup_preconditions

- name: "ucs_join | Get derived admin password"
  ansible.builtin.set_fact:
    ucs_join_final_root_password: '{{ ucs_join_derive_root_password_prefix + "@" + inventory_hostname.split("-")[-1] }}'
  when: "ucs_join_derive_root_password_from_hostname|bool"
  no_log: "{{ ucs_join_hide_logging }}"
  tags:
    - always
    - ucs_join
    - ucs_join_derive_admin_password

- name: "ucs_join | Use preconfigured root password"
  ansible.builtin.set_fact:
    ucs_join_final_root_password: '{{ ucs_join_root_password }}'
  when: "not ucs_join_derive_root_password_from_hostname|bool"
  no_log: "{{ ucs_join_hide_logging }}"
  tags:
    - always
    - ucs_join
    - ucs_join_derive_admin_password

- name: "ucs_join | Check if system-setup is run"
  ansible.builtin.stat:
    path: "/etc/ansible/univention-system-setup_sucessful"
  register: "ucs_join_system_setup_status"
  tags:
    - always
    - ucs_join
    - ucs_join_system_setup_check

- name: "ucs_join | Carry out system setup"
  block:
    - name: "ucs_join | Create UCS join profile from template"
      ansible.builtin.template:
        src: "profile.j2"
        dest: "/var/cache/univention-system-setup/profile"
        mode: "644"
      no_log: "{{ ucs_join_hide_logging }}"
      tags:
        - ucs_join_system_setup_profile

    - name: "ucs_join | primary | Carry out UCS join (primary/standalone)"
      ansible.builtin.command: "/usr/lib/univention-system-setup/scripts/setup-join.sh"
      when: "ucs_join_server_type|default('master') != 'backup'"
      tags:
        - ucs_join_system_setup_primary
        - ucs_join_system_setup_standalone

    - name: "ucs_join | primary | Create UCS join profile from template"
      ansible.builtin.template:
        src: "system-setup-vars.j2"
        dest: "/etc/ansible/facts.d/system-setup-vars.yml"
        mode: "644"
      tags:
        - ucs_join_system_setup_profile

    - name: "ucs_join | backup | Carry out UCS join (backup)"
      block:
        - name: "Create temporary admin password file"
          ansible.builtin.tempfile:
            state: file
          register: ucs_join_admin_pw_file
          tags:
            - ucs_join_system_setup_backup_admin_pw_file_temp

        - name: "ucs_join | backup | Write admin password into temporary file"
          ansible.builtin.copy:
            dest: "{{ ucs_join_admin_pw_file.path }}"
            content: "{{ ucs_join_root_password }}"
            mode: "0600"
          no_log: "{{ ucs_join_hide_logging }}"
          tags:
            - ucs_join_system_setup_backup_admin_pw_file

        - name: "ucs_join | backup | Carry out UCS join (backup)"
          ansible.builtin.command: >
            /usr/lib/univention-system-setup/scripts/setup-join.sh
            --dcaccount "{{ ucs_join_admin_user_name }}"
            --password_file "{{ ucs_join_admin_pw_file.path }}"
          tags:
            - ucs_join_system_setup_backup_run

      always:
        - name: "ucs_join | backup | Make sure that the temporary admin password file is gone"
          ansible.builtin.file:
            path: "{{ ucs_join_admin_pw_file.path }}"
            state: "absent"
          tags:
            - ucs_join_system_setup_backup_cleanup_admin_pw_file
            - cleanup

      when: "ucs_join_server_type|default('master') == 'backup'"
      tags:
        - ucs_join_system_setup_backup

    - name: "ucs_join | Create successful system-setup marker"
      ansible.builtin.file:
        path: "/etc/ansible/univention-system-setup_sucessful"
        state: "touch"
        mode: "644"
      tags:
        - ucs_join_system_setup_successful
  when: "ucs_join_system_setup_status.stat.exists is false"
  tags:
    - ucs_join
    - ucs_join_system_setup

- name: "ucs_join | Change network settings when system already initialized"
  block:
    - name: "ucs_join | Use DHCP network setting"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ ucs_join_network_config_interface }}"
            value: "dhcp"
      when: "ucs_join_network_config_type == 'dhcp'"
      tags:
        - ucs_join_network_settings_dhcp

    - name: "ucs_join | Use static network setting (interface)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ ucs_join_network_config_interface }}"
            value: ""
          - key: "interfaces/{{ ucs_join_network_config_interface }}/address"
            value: "{{ ucs_join_network_config_static_ip_config|ipaddr('address') }}"
          - key: "interfaces/{{ ucs_join_network_config_interface }}/netmask"
            value: "{{ ucs_join_network_config_static_ip_config|ipaddr('netmask') }}"
          - key: "interfaces/{{ ucs_join_network_config_interface }}/network"
            value: "{{ ucs_join_network_config_static_ip_config|ipaddr('network') }}"
          - key: "interfaces/{{ ucs_join_network_config_interface }}/broadcast"
            value: "{{ ucs_join_network_config_static_ip_config|ipaddr('broadcast') }}"
      when: "ucs_join_network_config_type != 'dhcp'"
      tags:
        - ucs_join_network_settings_static_interface

    - name: "ucs_join | Use static network setting (additional interfaces)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "interfaces/{{ item.key }}"
            value: ""
          - key: "interfaces/{{ item.key }}/address"
            value: "{{ item.value|ipaddr('address') }}"
          - key: "interfaces/{{ item.key }}/netmask"
            value: "{{ item.value|ipaddr('netmask') }}"
          - key: "interfaces/{{ item.key }}/network"
            value: "{{ item.value|ipaddr('network') }}"
          - key: "interfaces/{{ item.key }}/broadcast"
            value: "{{ item.value|ipaddr('broadcast') }}"
      when: "ucs_join_network_config_type != 'dhcp'"
      loop: "{{ ucs_join_network_config_static_additional_interfaces|default([])|dict2items }}"
      tags:
        - ucs_join_network_settings_static_additional_interfaces

    - name: "ucs_join | Use static network setting (dns)"
      univention.ucs_modules.univention_config_registry:
        kvlist:
          - key: "dns/forwarder{{ dns_servers_index }}"
            value: "{{ item }}"
      loop: "{{ ucs_join_network_config_static_dns_servers|default([]) }}"
      loop_control:
        index_var: "dns_servers_index"
      when: "ucs_join_network_config_type != 'dhcp'"
      tags:
        - ucs_join_network_settingsstatic_dns

  when: "ucs_join_system_setup_status.stat.exists"
  tags:
    - ucs_join
    - ucs_join_network_settings

- name: "Check if previous setup vars are set"
  ansible.builtin.stat:
    path: "/etc/ansible/facts.d/system-setup-vars.yml"
  register: "ucs_join_system_setup_vars_file"
  tags:
    - always
    - ucs_join
    - ucs_join_system_setup_vars

- name: "ucs_join | Check if user wants to change unsupported vars"
  block:
    - name: "ucs_join | Create temporary admin password file"
      ansible.builtin.tempfile:
        state: "file"
        suffix: ".yml"
      register: ucs_join_asystem_setup_tempfile
      tags:
        - ucs_join_system_setup_facts_temp

    - name: "ucs_join | Get previous system configuration"
      ansible.builtin.fetch:
        src: "/etc/ansible/facts.d/system-setup-vars.yml"
        dest: "{{ ucs_join_asystem_setup_tempfile.path }}"
        flat: true
      tags:
        - ucs_join_system_setup_facts_fetch

    - name: "ucs_join | Include vars of previous join"
      ansible.builtin.include_vars:
        file: "{{ ucs_join_asystem_setup_tempfile.path }}"
        name: "ucs_join_system_setup_vars"
      tags:
        - ucs_join_system_setup_facts_include_vars

    - name: "ucs_join | Assert that unchangeable vars are the same"
      ansible.builtin.assert:
        that:
          - '"{{ ucs_join_system_setup_vars.ucs_join_hostname }}" == "{{ ucs_join_hostname }}"'
          - '"{{ ucs_join_system_setup_vars.ucs_join_domain_name }}" == "{{ ucs_join_domain_name }}"'
          - '"{{ ucs_join_system_setup_vars.ucs_join_basedn }}" == "{{ ucs_join_basedn }}"'
          - '"{{ ucs_join_system_setup_vars.ucs_join_server_type }}" == "{{ ucs_join_server_type }}"'
        fail_msg: "You've tried to change variables which will afterwards damage your exising installation."
      tags:
        - ucs_join_system_setup_facts_assert

  always:
    - name: "ucs_join | Make sure that the system setup vars are gone"
      ansible.builtin.file:
        path: "{{ ucs_join_asystem_setup_tempfile.path }}"
        state: "absent"
      tags:
        - ucs_join_system_setup_facts_temp_removal
        - cleanup

  when: "ucs_join_system_setup_vars_file.stat.exists"
  tags:
    - ucs_join_system_setup_facts
    - ucs_join

- name: "ucs_join | Run Univention Join Scripts"
  block:
    - name: "ucs_join | Create temporary admin password file"
      ansible.builtin.tempfile:
        state: "file"
      register: ucs_join_admin_pw_file
      no_log: "{{ ucs_join_hide_logging }}"
      tags:
        - ucs_join_run_join_script_admin_pw_file_temp

    - name: "ucs_join | Write admin password into temporary file"
      ansible.builtin.copy:
        dest: "{{ ucs_join_admin_pw_file.path }}"
        content: "{{ ucs_join_root_password }}"
        mode: 0600
      tags:
        - ucs_join_run_join_script_admin_pw_file

    - name: "ucs_join | Run univention join scripts"
      ansible.builtin.command: >
        univention-run-join-scripts
        -dcaccount "{{ ucs_join_admin_user_name }}"
        -dcpwd "{{ ucs_join_admin_pw_file.path }}"
      tags:
        - ucs_join_run_join_script_run

  always:
    - name: "ucs_join | Make sure that the temporary admin password file is gone"
      ansible.builtin.file:
        path: "{{ ucs_join_admin_pw_file.path }}"
        state: "absent"
      tags:
        - ucs_join_run_join_script_cleanup_admin_pw_file
        - cleanup
  tags:
    - ucs_join
    - ucs_join_run_join_script
